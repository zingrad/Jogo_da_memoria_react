{"version":3,"sources":["components/CardElement.js","components/GameBoard.js","components/GameOver.js","game/game.js","MemoryGame.js","reportWebVitals.js","index.js"],"names":["CardElement","props","onClick","handleFlip","card","id","className","flipped","src","icon","alt","GameBoard","cards","map","index","GameOver","show","handleRestart","game","lockMode","firstCard","secondCard","setCard","this","filter","checkMatch","clearCards","techs","createCardsFromTechs","forEach","tech","push","createPairFromTechs","flatMap","pair","shuffleCards","createIdWithTech","parseInt","Math","random","currentIndex","length","randomIndex","floor","unflipCards","checkgameOver","flipCard","cardId","gameOverCallback","noMatchCallback","setTimeout","MemoryGame","useState","gameOver","setGameOver","setCards","useEffect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.27b71b3b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\n\r\nexport default function CardElement(props) {\r\n    return(\r\n        <div onClick={()=>{props.handleFlip(props.card)}} id={props.card.id} className={`card ${props.card.flipped?\"flip\":\"\"}`}>\r\n        <div className=\"card_front\">\r\n            <img className=\"icon\" \r\n            src={`assets/${props.card.icon}.png`} \r\n            alt={props.card.icon}></img>\r\n            </div>  \r\n        <div className=\"card_back\">\r\n            {\"</>\"}\r\n            </div>   \r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport CardElement from './CardElement'\r\n\r\nexport default function GameBoard(props) {\r\n    return (\r\n        \r\n        <div id=\"gameBoard\">\r\n            {props.cards.map((card, index)=>\r\n            <CardElement handleFlip={props.handleFlip} key={index} card={card}></CardElement>\r\n            )}\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React, { Fragment } from 'react'\r\n\r\n\r\n//se props.show for true mostrar gameOver se não mostrar nada \r\nexport default function GameOver(props) {\r\n    return (props.show?\r\n        <div id=\"gameOver\">\r\n        <div>\r\n            Parabéns, você completou o jogo!\r\n        </div>\r\n        <button id=\"restart\" onClick={props.handleRestart}>Jogue novamente</button>\r\n    </div> : <Fragment />\r\n    )\r\n}\r\n\r\n// é passado o onclick que recebe uma função por propriedade\r\n","let game = {\r\n\r\n    lockMode: false,\r\n    firstCard: null,\r\n    secondCard: null,\r\n\r\n    setCard: function (id) {\r\n        let card = this.cards.filter(card => card.id === id)[0]\r\n\r\n\r\n        if (card.flipped || this.lockMode) {\r\n            return false\r\n        }\r\n        if (!this.firstCard) {\r\n            this.firstCard = card\r\n            this.firstCard.flipped = true\r\n            return true\r\n        } else {\r\n            this.secondCard = card\r\n            this.secondCard.flipped = true\r\n            this.lockMode = true\r\n            return true\r\n        }\r\n    },\r\n    checkMatch: function () {\r\n        if (!this.firstCard || !this.secondCard) {\r\n            return false\r\n        }\r\n        return this.firstCard.icon === this.secondCard.icon\r\n\r\n    },\r\n\r\n    clearCards: function () {\r\n        this.firstCard = null\r\n        this.secondCard = null\r\n        this.lockMode = false\r\n    }\r\n    ,\r\n    techs: [\r\n        'bootstrap',\r\n        'css',\r\n        'electron',\r\n        'firebase',\r\n        'html',\r\n        'javascript',\r\n        'jquery',\r\n        'mongo',\r\n        'node',\r\n        'react',\r\n    ],\r\n\r\n    cards: null,\r\n\r\n\r\n\r\n    createCardsFromTechs: function () {\r\n        this.cards = []\r\n        this.techs.forEach((tech) => {\r\n            this.cards.push(this.createPairFromTechs(tech))\r\n\r\n        })\r\n        this.cards = this.cards.flatMap(pair => pair)\r\n        this.shuffleCards()\r\n        return this.cards\r\n    },\r\n\r\n    createPairFromTechs: function (tech) {\r\n        return [{\r\n            // A carta deve possuir um id, mesmo sendo seu par\r\n            id: this.createIdWithTech(tech),\r\n            icon: tech,\r\n            flipped: false\r\n        }, {\r\n            id: this.createIdWithTech(tech),\r\n            icon: tech,\r\n            flipped: false\r\n\r\n        }]\r\n    },\r\n    createIdWithTech: function (tech) {\r\n        return tech + parseInt(Math.random() * 1000)\r\n    },\r\n\r\n    shuffleCards: function (cards) {\r\n        let currentIndex = this.cards.length\r\n        let randomIndex = 0\r\n\r\n\r\n        while (currentIndex !== 0) {\r\n            randomIndex = Math.floor(Math.random() * currentIndex)\r\n            currentIndex--\r\n            [this.cards[randomIndex], this.cards[currentIndex]] = [this.cards[currentIndex], this.cards[randomIndex]]\r\n        }\r\n    },\r\n    unflipCards: function () {\r\n\r\n\r\n        this.firstCard.flipped = false\r\n        this.secondCard.flipped = false\r\n        this.clearCards()\r\n\r\n    },\r\n\r\n    checkgameOver: function () {\r\n        return this.cards.filter(card => !card.flipped).length === 0\r\n    },\r\n\r\n    flipCard:function(cardId,gameOverCallback,noMatchCallback){\r\n        if (game.setCard(cardId)) {\r\n\r\n            \r\n            if (game.secondCard) {\r\n    \r\n    \r\n                if (this.checkMatch()) {\r\n                    this.clearCards()\r\n                    if(this.checkgameOver()){\r\n                       //GameOver\r\n                     gameOverCallback()\r\n                    }\r\n                } else {\r\n    \r\n                    setTimeout(() => {\r\n    \r\n                       // no Match\r\n                        this.unflipCards()\r\n                     noMatchCallback()\r\n                    }, 1000);\r\n                };\r\n            }\r\n        }\r\n}\r\n}\r\n\r\nexport default game","import React,{useEffect, useState} from 'react'\r\nimport GameBoard from './components/GameBoard'\r\nimport GameOver from './components/GameOver'\r\nimport game from './game/game'\r\n\r\nexport default function MemoryGame() {\r\n\r\n    const[gameOver,setGameOver] = useState(false)\r\n    const[cards,setCards] = useState([])\r\n\r\n    useEffect(()=>{\r\n    setCards(game.createCardsFromTechs())\r\n    },[])\r\n\r\n    //função que seta o estado de gameOver pra false assim sumira da tela\r\n    function restart(){\r\n        setCards(game.createCardsFromTechs())\r\n        game.clearCards()\r\n        setGameOver(false)\r\n    }\r\n\r\n    function handleFlip(card){\r\n      \r\n\r\n        game.flipCard(card.id,()=>{\r\n            //gameOverCallback\r\n            setGameOver(true)\r\n        },()=>{\r\n            //noMatchCallback\r\n            setCards([...game.cards])\r\n        } )\r\n\r\n        setCards([...game.cards])\r\n    }\r\n\r\n    //abaixo show recebe o estado atual de gameOver que é oque está no useState\r\n    return (\r\n        <div>\r\n            <GameBoard handleFlip={handleFlip} cards={cards}></GameBoard>\r\n            <GameOver show={gameOver} handleRestart={restart}></GameOver> \r\n        </div>\r\n    )\r\n}\r\n// nesse componente tbm recebe a função restart que é passado pra handleRestart dessa forma\r\n//o GameOver.js consegue usar esse handleRestart em um Onclick","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MemoryGame from './MemoryGame';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MemoryGame />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}